[project]
name = easysun_partnerupdater
docker_registry = 10.242.1.1:52300

[tox]
isolated_build = True
skipsdist = 1 # does not generate a package, defaults to false
envlist = 
    default
    format_tests
    format_code
    coverage
    
[format]
deps =
    toml
    yapf
    isort
    flake8
    Flake8-pyproject

[testenv]
description = The default env, should provide default values to anothers, wasnt meant to run alone
skip_install = True
force_errors = True
allowlist_externals =
    chcp
    docker
setenv =
    PYTHONIOENCODING = 'utf-8'
commands =
    chcp 65001 

[testenv:format_tests]
description = lint and format tests with yapf, isort and flake8
deps =
    {[format]deps}

commands =
    yapf .{/}tests -irp
    isort .{/}tests
    flake8 .{/}tests

[testenv:format_code]
description = lint and format code with yapf, isort and flake8
deps =
    {[format]deps}

commands =
    yapf .{/}src -irp
    isort .{/}src
    flake8 .{/}src

[testenv:coverage]
description = execute unittests and generate coverage report
setenv =
    DB_DRIVER_NAME=sqlite
    DB_DATABASE=.{/}tests{/}test_db.sqlite3
    GET_ADDRESS_FROM_VIACEP=0 # 0=false, 1=true
deps =
    -r requirements.txt
    coverage[toml]
    pytest
commands = 
    coverage run --source={toxinidir}{/}src{/}app --branch -m pytest {toxinidir} -x 
    coverage html

[testenv:build_docker]
description = Build docker image, upload to {[project]docker_registry}, also remove images from system
deps =
    {[testenv:format_tests]deps}
    {[testenv:format_code]deps}
    {[testenv:coverage]deps}
commands =
    {[testenv:format_tests]commands}
    {[testenv:format_code]commands}
    {[testenv:coverage]commands}

    ; build image
    docker build . -t {[project]name}

    ; tag the build with latest and then version from file
    docker image tag {[project]name} {[project]docker_registry}/{[project]name}:latest
    python -c "\
        from src.app.definitions import __version__; \
        from subprocess import Popen, PIPE; \
        import shlex; \
        commands = list(); \ 

        commands.append(f'docker tag {[project]name} {[project]docker_registry}/{[project]name}:{__version__}'); \
        [Popen(shlex.split(cmd), shell=True, stdout=PIPE).communicate() for cmd in commands];\
        "

    ; push images to registry
    docker image push --all-tags {[project]docker_registry}/{[project]name}

    ; delete images
    docker rmi --force {[project]docker_registry}/{[project]name}:latest

    python -c "\
        from src.app.definitions import __version__; \
        from subprocess import Popen, PIPE; \
        import shlex; \
        commands = list(); \ 
        
        commands.append(f'docker rmi --force {[project]docker_registry}/{[project]name}:{__version__}'); \
        [Popen(shlex.split(cmd), shell=True, stdout=PIPE).communicate() for cmd in commands];\
        "
